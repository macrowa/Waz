<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
using System;
using Dapper.Contrib.Extensions;
<#
	MsDbInfo dbInfo=new MsDbInfo(Config.ConnectionString,Config.DbName);
#>

namespace <#=Config.NameSpace#>
{

	<#foreach(MsTableInfo tableInfo in dbInfo.TableInfos){#>

	[Table("<#=tableInfo.TableName#>")]

	public partial class <#=Config.ClassNamingRules(tableInfo.TableName)#>
	{
		<#Config.GenerateFields=false;#>
		<#if(Config.GenerateFields){#>

		#region Fileds
		<#foreach(MsColumnInfo columnInfo in tableInfo.CloumnInfos){#>

		private <#= columnInfo.CSharpType #> <#=Config.FieldNamingRules(columnInfo.ColumnName) #>;
		<#}#>

		#endregion

		<#}#>

		<#foreach(MsColumnInfo columnInfo in tableInfo.CloumnInfos){#>

		/// <summary>
		/// <#=columnInfo.Remark#>
		/// </summary>
		public <#= columnInfo.CSharpType #> <#=Config.PropertyNamingRules(columnInfo.ColumnName) #>
		{
			<#if(Config.GenerateFields){#>

			get
			{
				return <#=Config.FieldNamingRules(columnInfo.ColumnName) #>;
			}
			set
			{
				<#=Config.FieldNamingRules(columnInfo.ColumnName) #>=value;
			}
			<#}else{#>

			get;set;
			<#}#>

		}
		<#}#>

	}
	<#}#>

}



<#+
	public class Config
	{
		public static readonly string NameSpace="Waz.Data";
		public static readonly string ConnectionString="Data Source =192.168.1.160;Initial Catalog = MWaDB;UID=sa;PWD=1234567890";
		public static readonly string DbName="MWaDB";

		public static bool GenerateFields{get;set;}

		public static string ClassNamingRules(string tableName)
        {
			if(string.IsNullOrEmpty(tableName))
            {
				throw new ArgumentNullException("TableName Is Null Or Empty.");
			}
			return tableName;//.Replace("T_",string.Empty);
		}
		public static string FieldNamingRules(string cloumnName)
        {
			if(string.IsNullOrEmpty(cloumnName))
            {
				throw new ArgumentNullException("CloumnName Is Null Or Empty.");
			}
			
			return "_"+Char.ToLower(cloumnName[0])+cloumnName.Substring(1);
		}
		public static string PropertyNamingRules(string cloumnName)
        {
			if(string.IsNullOrEmpty(cloumnName))
            {
				throw new ArgumentNullException("CloumnName Is Null Or Empty.");
			}
			
			return Char.ToUpper(cloumnName[0])+cloumnName.Substring(1);
		}
	}
#>

<#+
    public class MsDbInfo
    {
        #region 查询语句
        private const string tablesQuery = @"
SELECT obj.name tablename,schem.name schemname,idx.rows,
CAST
(
	CASE 
		WHEN (SELECT COUNT(1) FROM sys.indexes WHERE object_id= obj.OBJECT_ID AND is_primary_key=1) >=1 THEN 1
		ELSE 0
	END 
	AS BIT
) hasprimarykey                                         
from {0}.sys.objects obj 
inner join {0}.dbo.sysindexes idx on obj.object_id=idx.id and idx.indid<=1
inner join {0}.sys.schemas schem ON obj.schema_id=schem.schema_id
where type='U' {1}
order by obj.name";
        #endregion

        private string _connectionString;

        private string _dbName;

        private List<MsTableInfo> _tableInfos;


        public List<MsTableInfo> TableInfos
        {
            get
            {
                if (_tableInfos == null)
                {
                    //加载表信息
                    List<MsTableInfo> models = new List<MsTableInfo>();

                    string query = string.Format(tablesQuery, _dbName, null);
                    DataTable tableInfos = Helper.Query(_connectionString, query);
                    foreach (DataRow row in tableInfos.Rows)
                    {
                        MsTableInfo model = new MsTableInfo(_connectionString, _dbName)
                        {
                            TableName = row.Field<string>("tablename"),
                            SchemaName = row.Field<string>("schemname"),
                            Rows = row.Field<int>("rows"),
                            HasPrimaryKey = row.Field<bool>("hasprimarykey")
                        };
                        models.Add(model);
                    }

                    _tableInfos = models;
                }
                return _tableInfos;
            }
        }

        public MsDbInfo(string connectionString, string dbName)
        {
            _connectionString = connectionString;
            _dbName = dbName;
        }
    }

    public class MsTableInfo
    {
        #region 查询语句
        private const string cloumnQuery = @"
WITH indexCTE AS
(
    SELECT 
    ic.column_id,
    ic.index_column_id,
    ic.object_id    
    FROM {0}.sys.indexes idx
    INNER JOIN {0}.sys.index_columns ic ON idx.index_id = ic.index_id AND idx.object_id = ic.object_id
    WHERE  idx.object_id =OBJECT_ID(@tableName) AND idx.is_primary_key=1
)
select
colm.column_id ColumnID,
CAST(CASE WHEN indexCTE.column_id IS NULL THEN 0 ELSE 1 END AS BIT) IsPrimaryKey,
colm.name ColumnName,
systype.name ColumnType,
colm.is_identity IsIdentity,
colm.is_nullable IsNullable,
cast(colm.max_length as int) ByteLength,
(
    case 
        when systype.name='nvarchar' and colm.max_length>0 then colm.max_length/2 
        when systype.name='nchar' and colm.max_length>0 then colm.max_length/2
        when systype.name='ntext' and colm.max_length>0 then colm.max_length/2 
        else colm.max_length
    end
) CharLength,
cast(colm.precision as int) Precision,
cast(colm.scale as int) Scale,
prop.value Remark
from {0}.sys.columns colm
inner join {0}.sys.types systype on colm.system_type_id=systype.system_type_id and colm.user_type_id=systype.user_type_id
left join {0}.sys.extended_properties prop on colm.object_id=prop.major_id and colm.column_id=prop.minor_id
LEFT JOIN indexCTE ON colm.column_id=indexCTE.column_id AND colm.object_id=indexCTE.object_id                                        
where colm.object_id=OBJECT_ID(@TableName)
order by colm.column_id";
        #endregion

        private string _connectionString;
        private string _dbName;
        private List<MsColumnInfo> _cloumnInfos;
        /// <summary>
        /// 表名称
        /// </summary>
        public string TableName { get; set; }
        /// <summary>
        /// 表的架构
        /// </summary>
        public string SchemaName { get; set; }
        /// <summary>
        /// 表的记录数
        /// </summary>
        public int Rows { get; set; }
        /// <summary>
        /// 是否含有主键
        /// </summary>
        public bool HasPrimaryKey { get; set; }

        public List<MsColumnInfo> CloumnInfos
        {
            get
            {
                if (_cloumnInfos == null)
                {
                    //加载列信息
                    List<MsColumnInfo> models = new List<MsColumnInfo>();
                    using (SqlConnection connection = new SqlConnection(_connectionString))
                    {
                        string query = string.Format(cloumnQuery, _dbName);
                        SqlParameter param = new SqlParameter("@tableName", SqlDbType.NVarChar, 100) { Value = string.Format("{0}.{1}.{2}", _dbName, SchemaName, TableName) };
                        DataTable cloumnInfos = Helper.Query(_connectionString, query, param);
                        foreach (DataRow row in cloumnInfos.Rows)
                        {
                            MsColumnInfo model = new MsColumnInfo()
                            {
                                ColumnID = row.Field<int>("ColumnID"),
                                IsPrimaryKey = row.Field<bool>("IsPrimaryKey"),
                                ColumnName = row.Field<string>("ColumnName"),
                                ColumnType = row.Field<string>("ColumnType"),
                                IsIdentity = row.Field<bool>("IsIdentity"),
                                IsNullable = row.Field<bool>("IsNullable"),
                                ByteLength = row.Field<int>("ByteLength"),
                                CharLength = row.Field<int>("CharLength"),
                                Scale = row.Field<int>("Scale"),
                                Remark = row["Remark"].ToString()
                            };
                            models.Add(model);
                        }
                    }
                    _cloumnInfos = models;
                }
                return _cloumnInfos;
            }
        }

        public MsTableInfo(string connectionString, string dbName)
        {
            _connectionString = connectionString;
            _dbName = dbName;
        }
    }

    public class MsColumnInfo
    {
        /// <summary>
        /// 字段ID
        /// </summary>
        public int ColumnID { get; set; }

        /// <summary>
        /// 是否主键
        /// </summary>
        public bool IsPrimaryKey { get; set; }

        /// <summary>
        /// 字段名称
        /// </summary>
        public string ColumnName { get; set; }

        /// <summary>
        /// 字段类型
        /// </summary>
        public string ColumnType { get; set; }

        /// <summary>
        /// 数据库类型对应的C#类型
        /// </summary>
        public string CSharpType
        {
            get
            {
                return MsTypeMap.MapCsharpType(ColumnType);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public Type CommonType
        {
            get
            {
                return MsTypeMap.MapCommonType(ColumnType);
            }
        }

        /// <summary>
        /// 字节长度
        /// </summary>
        public int ByteLength { get; set; }

        /// <summary>
        /// 字符长度
        /// </summary>
        public int CharLength { get; set; }

        /// <summary>
        /// 小数位
        /// </summary>
        public int Scale { get; set; }

        /// <summary>
        /// 是否自增列
        /// </summary>
        public bool IsIdentity { get; set; }

        /// <summary>
        /// 是否允许空
        /// </summary>
        public bool IsNullable { get; set; }

        /// <summary>
        /// 描述
        /// </summary>
        public string Remark { get; set; }
    }

    public class MsTypeMap
    {
        public static string MapCsharpType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return dbtype;
            dbtype = dbtype.ToLower();
            string csharpType = "object";
            switch (dbtype)
            {
                case "bigint": csharpType = "long"; break;
                case "binary": csharpType = "byte[]"; break;
                case "bit": csharpType = "bool"; break;
                case "char": csharpType = "string"; break;
                case "date": csharpType = "DateTime"; break;
                case "datetime": csharpType = "DateTime"; break;
                case "datetime2": csharpType = "DateTime"; break;
                case "datetimeoffset": csharpType = "DateTimeOffset"; break;
                case "decimal": csharpType = "decimal"; break;
                case "float": csharpType = "double"; break;
                case "image": csharpType = "byte[]"; break;
                case "int": csharpType = "int"; break;
                case "money": csharpType = "decimal"; break;
                case "nchar": csharpType = "string"; break;
                case "ntext": csharpType = "string"; break;
                case "numeric": csharpType = "decimal"; break;
                case "nvarchar": csharpType = "string"; break;
                case "real": csharpType = "Single"; break;
                case "smalldatetime": csharpType = "DateTime"; break;
                case "smallint": csharpType = "short"; break;
                case "smallmoney": csharpType = "decimal"; break;
                case "sql_variant": csharpType = "object"; break;
                case "sysname": csharpType = "object"; break;
                case "text": csharpType = "string"; break;
                case "time": csharpType = "TimeSpan"; break;
                case "timestamp": csharpType = "byte[]"; break;
                case "tinyint": csharpType = "byte"; break;
                case "uniqueidentifier": csharpType = "Guid"; break;
                case "varbinary": csharpType = "byte[]"; break;
                case "varchar": csharpType = "string"; break;
                case "xml": csharpType = "string"; break;
                default: csharpType = "object"; break;
            }
            return csharpType;
        }

        public static Type MapCommonType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return Type.Missing.GetType();
            dbtype = dbtype.ToLower();
            Type commonType = typeof(object);
            switch (dbtype)
            {
                case "bigint": commonType = typeof(long); break;
                case "binary": commonType = typeof(byte[]); break;
                case "bit": commonType = typeof(bool); break;
                case "char": commonType = typeof(string); break;
                case "date": commonType = typeof(DateTime); break;
                case "datetime": commonType = typeof(DateTime); break;
                case "datetime2": commonType = typeof(DateTime); break;
                case "datetimeoffset": commonType = typeof(DateTimeOffset); break;
                case "decimal": commonType = typeof(decimal); break;
                case "float": commonType = typeof(double); break;
                case "image": commonType = typeof(byte[]); break;
                case "int": commonType = typeof(int); break;
                case "money": commonType = typeof(decimal); break;
                case "nchar": commonType = typeof(string); break;
                case "ntext": commonType = typeof(string); break;
                case "numeric": commonType = typeof(decimal); break;
                case "nvarchar": commonType = typeof(string); break;
                case "real": commonType = typeof(Single); break;
                case "smalldatetime": commonType = typeof(DateTime); break;
                case "smallint": commonType = typeof(short); break;
                case "smallmoney": commonType = typeof(decimal); break;
                case "sql_variant": commonType = typeof(object); break;
                case "sysname": commonType = typeof(object); break;
                case "text": commonType = typeof(string); break;
                case "time": commonType = typeof(TimeSpan); break;
                case "timestamp": commonType = typeof(byte[]); break;
                case "tinyint": commonType = typeof(byte); break;
                case "uniqueidentifier": commonType = typeof(Guid); break;
                case "varbinary": commonType = typeof(byte[]); break;
                case "varchar": commonType = typeof(string); break;
                case "xml": commonType = typeof(string); break;
                default: commonType = typeof(object); break;
            }
            return commonType;
        }
    }

    public class Helper
    {
        public static DataTable Query(string connectionString, string query, params SqlParameter[] pms)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = connection.CreateCommand();
                command.CommandText = query;
                command.Parameters.AddRange(pms);
                SqlDataAdapter adapter = new SqlDataAdapter(command);
                DataTable dt = new DataTable();
                adapter.Fill(dt);
                return dt;
            }
        }
    }
#>
